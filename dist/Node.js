// Generated by LiveScript 1.5.0
(function(){
  var Node;
  Node = (function(){
    Node.displayName = 'Node';
    var prototype = Node.prototype, constructor = Node;
    function Node(symbol, literal, children){
      var this$ = this;
      this.symbol = symbol;
      this.literal = literal != null ? literal : '';
      this.children = children != null
        ? children
        : [];
      map(function(it){
        return it.parent = this$;
      }, this.children);
    }
    Node.prototype.print = function(level){
      var this$ = this;
      level == null && (level = 0);
      if (this.symbol.length) {
        console.log(("" + repeat(level, " ") + "" + this.symbol + "") + " " + (!this.children.length || all(function(it){
          return !it.symbol.length;
        }, this.children) ? this.literal.replace('\n', '') : ""));
      }
      return map(function(it){
        return it.print(level + 2);
      }, this.children);
    };
    Node.prototype.left = function(){
      var prev, i$, ref$, len$, child;
      prev = null;
      for (i$ = 0, len$ = (ref$ = this.parent.children).length; i$ < len$; ++i$) {
        child = ref$[i$];
        if (child === this) {
          return prev;
        }
        prev = child;
      }
      return null;
    };
    Node.prototype.right = function(){
      var next, i$, ref$, len$, child;
      next = false;
      for (i$ = 0, len$ = (ref$ = this.parent.children).length; i$ < len$; ++i$) {
        child = ref$[i$];
        if (next) {
          return child;
        }
        if (child === this) {
          next = true;
        }
      }
      return null;
    };
    Node.prototype.contains = function(symb){
      var this$ = this;
      if (this.symbol === symb) {
        return true;
      }
      return any(function(it){
        return it.contains(symb);
      }, this.children);
    };
    Node.prototype.findSymbol = function(symb){
      var this$ = this;
      if (this.symbol === symb) {
        return this;
      }
      return find(function(it){
        return it.findSymbol(symb);
      }, this.children);
    };
    Node.prototype.map = function(fn){
      var this$ = this;
      this.children = map(fn, this.children);
      return map(function(it){
        return it.map(fn);
      }, this.children);
    };
    Node.prototype.filter = function(fn){
      var this$ = this;
      this.children = filter(fn, this.children);
      return map(function(it){
        return it.filter(fn);
      }, this.children);
    };
    Node.prototype.filterOptional = function(){
      return this.filter(function(it){
        return !it.optional;
      });
    };
    Node.prototype.mapReplace = function(){
      var this$ = this;
      map(function(it){
        return it.mapReplace();
      }, this.children);
      return this.children = each(function(it){
        return it.parent = this$;
      })(
      flatten(
      map(function(it){
        if (it.replace) {
          return it.children;
        } else {
          return it;
        }
      })(
      this.children)));
    };
    Node.prototype.firstLeave = function(){
      if (!this.children.length) {
        return this;
      } else {
        return this.children[0].firstLeave();
      }
    };
    return Node;
  }());
  module.exports = Node;
}).call(this);
